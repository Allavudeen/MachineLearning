{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5322b644",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-02-29T11:15:31.797024Z",
     "iopub.status.busy": "2024-02-29T11:15:31.796320Z",
     "iopub.status.idle": "2024-02-29T11:15:50.212647Z",
     "shell.execute_reply": "2024-02-29T11:15:50.211545Z"
    },
    "papermill": {
     "duration": 18.431866,
     "end_time": "2024-02-29T11:15:50.215694",
     "exception": false,
     "start_time": "2024-02-29T11:15:31.783828",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-02-29 11:15:34.571038: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "2024-02-29 11:15:34.571185: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "2024-02-29 11:15:34.787308: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import tensorflow as tf\n",
    "import os\n",
    "import cv2\n",
    "import imghdr\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import LabelBinarizer\n",
    "from itertools import chain\n",
    "import random\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Dense, Flatten, Dropout"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "10742e6e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:15:50.237765Z",
     "iopub.status.busy": "2024-02-29T11:15:50.237030Z",
     "iopub.status.idle": "2024-02-29T11:15:50.243156Z",
     "shell.execute_reply": "2024-02-29T11:15:50.241980Z"
    },
    "papermill": {
     "duration": 0.020127,
     "end_time": "2024-02-29T11:15:50.245778",
     "exception": false,
     "start_time": "2024-02-29T11:15:50.225651",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data = []\n",
    "test_data = []\n",
    "non_chars = [\"#\",\"$\",\"&\",\"@\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"0\"]\n",
    "img_size = 32\n",
    "num_images_per_folder_TR = 96\n",
    "num_images_per_folder_TS = 60"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5db376f6",
   "metadata": {
    "papermill": {
     "duration": 0.009275,
     "end_time": "2024-02-29T11:15:50.265149",
     "exception": false,
     "start_time": "2024-02-29T11:15:50.255874",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 1. Loading Data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "6bc59741",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:15:50.287086Z",
     "iopub.status.busy": "2024-02-29T11:15:50.286431Z",
     "iopub.status.idle": "2024-02-29T11:15:50.290727Z",
     "shell.execute_reply": "2024-02-29T11:15:50.289851Z"
    },
    "papermill": {
     "duration": 0.018415,
     "end_time": "2024-02-29T11:15:50.293236",
     "exception": false,
     "start_time": "2024-02-29T11:15:50.274821",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_dir = '/kaggle/input/a-z-handwritten-alphabets-jpg-files-in-26-folders/alphabet-dataset/Train'\n",
    "test_dir ='/kaggle/input/a-z-handwritten-alphabets-jpg-files-in-26-folders/alphabet-dataset/Validation'"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f6660ad0",
   "metadata": {
    "papermill": {
     "duration": 0.012229,
     "end_time": "2024-02-29T11:15:50.315288",
     "exception": false,
     "start_time": "2024-02-29T11:15:50.303059",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "* Resize all data to one size (32,32)\n",
    "* Convert image from (R,G,B) to binary (1 or 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "60c6b10c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:15:50.340207Z",
     "iopub.status.busy": "2024-02-29T11:15:50.339699Z",
     "iopub.status.idle": "2024-02-29T11:15:50.346817Z",
     "shell.execute_reply": "2024-02-29T11:15:50.345544Z"
    },
    "papermill": {
     "duration": 0.020936,
     "end_time": "2024-02-29T11:15:50.349077",
     "exception": false,
     "start_time": "2024-02-29T11:15:50.328141",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "def to_binary(image):\n",
    "    image = cv2.resize(cv2.cvtColor(img, cv2.COLOR_BGR2RGB),dsize=(32,32))\n",
    "    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n",
    "    (thresh, image_binary) = cv2.threshold(image_gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)\n",
    "    image_binary = cv2.threshold(image_gray, thresh, 255, cv2.THRESH_BINARY)[1]\n",
    "    return image_binary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "ce572393",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:15:50.371722Z",
     "iopub.status.busy": "2024-02-29T11:15:50.371080Z",
     "iopub.status.idle": "2024-02-29T11:15:58.862412Z",
     "shell.execute_reply": "2024-02-29T11:15:58.861295Z"
    },
    "papermill": {
     "duration": 8.506212,
     "end_time": "2024-02-29T11:15:58.865225",
     "exception": false,
     "start_time": "2024-02-29T11:15:50.359013",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for files in os.listdir(train_dir):\n",
    "    if files in non_chars:\n",
    "        continue\n",
    "    count = 0\n",
    "    files_path = os.path.join(train_dir,files)\n",
    "    images_list = os.listdir(files_path)\n",
    "    # We mix the data in case the capital letters come first or vice versa\n",
    "    selected_images = random.sample(images_list, min(num_images_per_folder_TR, len(images_list)))\n",
    "    for image in selected_images:\n",
    "        count += 1\n",
    "        if count > num_images_per_folder_TR:\n",
    "            break\n",
    "        img_path = os.path.join(files_path,image)\n",
    "        img = cv2.imread(img_path)\n",
    "        image_binary = to_binary(img)\n",
    "        train_data.append([image_binary,files])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "390322f0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:15:58.887780Z",
     "iopub.status.busy": "2024-02-29T11:15:58.887373Z",
     "iopub.status.idle": "2024-02-29T11:16:04.483231Z",
     "shell.execute_reply": "2024-02-29T11:16:04.482174Z"
    },
    "papermill": {
     "duration": 5.60985,
     "end_time": "2024-02-29T11:16:04.486037",
     "exception": false,
     "start_time": "2024-02-29T11:15:58.876187",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "for files in os.listdir(test_dir):\n",
    "    if files in non_chars:\n",
    "        continue\n",
    "    count = 0\n",
    "    files_path = os.path.join(test_dir,files)\n",
    "    images_list = os.listdir(files_path)\n",
    "    selected_images = random.sample(images_list, min(num_images_per_folder_TS, len(images_list)))\n",
    "    for image in selected_images:\n",
    "        count += 1\n",
    "        if count > num_images_per_folder_TS:\n",
    "            break\n",
    "        img_path = os.path.join(files_path,image)\n",
    "        img = cv2.imread(img_path)\n",
    "        image_binary = to_binary(img)\n",
    "        test_data.append([image_binary,files])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c34c0b8a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:04.509555Z",
     "iopub.status.busy": "2024-02-29T11:16:04.509122Z",
     "iopub.status.idle": "2024-02-29T11:16:04.518567Z",
     "shell.execute_reply": "2024-02-29T11:16:04.517303Z"
    },
    "papermill": {
     "duration": 0.024497,
     "end_time": "2024-02-29T11:16:04.522009",
     "exception": false,
     "start_time": "2024-02-29T11:16:04.497512",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1760, 1100)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(train_data) , len(test_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "92eef51c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:04.546218Z",
     "iopub.status.busy": "2024-02-29T11:16:04.545727Z",
     "iopub.status.idle": "2024-02-29T11:16:04.783877Z",
     "shell.execute_reply": "2024-02-29T11:16:04.782297Z"
    },
    "papermill": {
     "duration": 0.255262,
     "end_time": "2024-02-29T11:16:04.788867",
     "exception": false,
     "start_time": "2024-02-29T11:16:04.533605",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(32, 32)\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAGFCAYAAAASI+9IAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAGE0lEQVR4nO3cwWrjMABF0XjI//+yZne7mIFGJKpl95x1CKpjuGjRd4wxxgMAHo/Hn7MPAMA+RAGAiAIAEQUAIgoARBQAiCgAEFEAIM9XP3gcx8pzALDYK/+r7KYAQEQBgIgCABEFACIKAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgIgCABEFACIKAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgIgCABEFACIKAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgIgCABEFACIKAEQUAIgoABBRACDPsw8A/E5jjLOPkOM4zj7CNtwUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQMxfAx+w0XTFj9tx3nsVwUwAgogBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgNg+Am7pzvtEK7kpABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBAbB+9YYxx9hFi5wX4BDcFACIKAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQJ5nH+DKjuOY+vwYY9FJ1n73rNnnAuzDTQGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgIgCADFzwcetnNwwobG3md9np2kWvrgpABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBAjvHiAInNmZ+10y7M7G+/09lneMf3ZlPrfa88QzcFACIKAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgDkefYB+L8rT0usnAzY6e+EO3JTACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGA2D7iW7N7Qyu3j2a+e/bcK3eVVj4T3rfTO342NwUAIgoARBQAiCgAEFEAIKIAQEQBgIgCABEFACIKAEQUAIjtI25rdp9m5faRbR2uwk0BgIgCABEFACIKAEQUAIgoABBRACCiAEBEAYCIAgAxc3ETO0068L6Z38ckBp/kpgBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgIgCALF9xMdddbdn5VlWbk3NfvdOz5z9uCkAEFEAIKIAQEQBgIgCABEFACIKAEQUAIgoABBRACBmLuAHzE5L7DSLMcOExvW5KQAQUQAgogBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQGwfwYZWbgjtsqs0+zfutB91Z24KAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACImYtfamYywFzAvezy23uv9uSmAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGAiAIAsX3EqWb3b2Z2e3jf7PO2Z3R9bgoARBQAiCgAEFEAIKIAQEQBgIgCABEFACIKAEQUAIiZC75l6oBXzbwr3pM9uSkAEFEAIKIAQEQBgIgCABEFACIKAEQUAIgoABBRACCiAEBsH/Fxs1tJM1bu5aw8N//yvPfkpgBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgIgCALF9xKXYy4G13BQAiCgAEFEAIKIAQEQBgIgCABEFACIKAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgIgCABEFACIKAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGAiAIAEQUAIgoARBQAiCgAEFEAIKIAQEQBgIgCABEFACIKAEQUAIgoABBRACCiAEBEAYCIAgARBQAiCgBEFACIKAAQUQAgogBAnq9+cIyx8hwAbMBNAYCIAgARBQAiCgBEFACIKAAQUQAgogBARAGA/AUUoIMsYMYtXgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "latter : N\n"
     ]
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(train_data[0][0].shape)\n",
    "plt.imshow(train_data[0][0],cmap='gray')\n",
    "plt.axis('off')\n",
    "plt.show()\n",
    "print(\"latter :\",test_data[11][1])\n",
    "plt.imshow(test_data[11][0],cmap='gray')\n",
    "plt.axis('off')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3f706acd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:04.837557Z",
     "iopub.status.busy": "2024-02-29T11:16:04.836164Z",
     "iopub.status.idle": "2024-02-29T11:16:04.850942Z",
     "shell.execute_reply": "2024-02-29T11:16:04.849279Z"
    },
    "papermill": {
     "duration": 0.044622,
     "end_time": "2024-02-29T11:16:04.855631",
     "exception": false,
     "start_time": "2024-02-29T11:16:04.811009",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#mix all data\n",
    "random.shuffle(train_data)\n",
    "random.shuffle(test_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "551b3544",
   "metadata": {
    "papermill": {
     "duration": 0.010277,
     "end_time": "2024-02-29T11:16:04.880438",
     "exception": false,
     "start_time": "2024-02-29T11:16:04.870161",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 2. Split data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "550306a1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:04.904049Z",
     "iopub.status.busy": "2024-02-29T11:16:04.903223Z",
     "iopub.status.idle": "2024-02-29T11:16:04.909587Z",
     "shell.execute_reply": "2024-02-29T11:16:04.908574Z"
    },
    "papermill": {
     "duration": 0.021176,
     "end_time": "2024-02-29T11:16:04.912103",
     "exception": false,
     "start_time": "2024-02-29T11:16:04.890927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_X = []\n",
    "train_Y = []\n",
    "for features,label in train_data:\n",
    "    train_X.append(features)\n",
    "    train_Y.append(label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "641bc464",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:04.936043Z",
     "iopub.status.busy": "2024-02-29T11:16:04.935277Z",
     "iopub.status.idle": "2024-02-29T11:16:04.941489Z",
     "shell.execute_reply": "2024-02-29T11:16:04.940296Z"
    },
    "papermill": {
     "duration": 0.021223,
     "end_time": "2024-02-29T11:16:04.944461",
     "exception": false,
     "start_time": "2024-02-29T11:16:04.923238",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "test_X = []\n",
    "test_Y = []\n",
    "for features,label in test_data:\n",
    "    test_X.append(features)\n",
    "    test_Y.append(label)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b94c6f8",
   "metadata": {
    "papermill": {
     "duration": 0.01015,
     "end_time": "2024-02-29T11:16:04.965175",
     "exception": false,
     "start_time": "2024-02-29T11:16:04.955025",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Encode each character into vector as {‘a’:[1,0,0,0], ‘b’:[0,1,0,0] …….. ‘z’:[0,0,0,1]}."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "f111c411",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:04.989360Z",
     "iopub.status.busy": "2024-02-29T11:16:04.988957Z",
     "iopub.status.idle": "2024-02-29T11:16:05.016166Z",
     "shell.execute_reply": "2024-02-29T11:16:05.014439Z"
    },
    "papermill": {
     "duration": 0.043288,
     "end_time": "2024-02-29T11:16:05.019514",
     "exception": false,
     "start_time": "2024-02-29T11:16:04.976226",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "LB = LabelBinarizer()\n",
    "train_Y = LB.fit_transform(train_Y)\n",
    "test_Y = LB.fit_transform(test_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "29e71ba0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:05.043505Z",
     "iopub.status.busy": "2024-02-29T11:16:05.043097Z",
     "iopub.status.idle": "2024-02-29T11:16:05.065469Z",
     "shell.execute_reply": "2024-02-29T11:16:05.064188Z"
    },
    "papermill": {
     "duration": 0.037426,
     "end_time": "2024-02-29T11:16:05.068703",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.031277",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_X = np.array(train_X)/255.0\n",
    "train_X = train_X.reshape(-1,img_size,img_size,1)\n",
    "test_X = np.array(test_X)/255.0\n",
    "test_X = test_X.reshape(-1,img_size,img_size,1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "1638a16d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:05.091857Z",
     "iopub.status.busy": "2024-02-29T11:16:05.091406Z",
     "iopub.status.idle": "2024-02-29T11:16:05.096946Z",
     "shell.execute_reply": "2024-02-29T11:16:05.095689Z"
    },
    "papermill": {
     "duration": 0.020106,
     "end_time": "2024-02-29T11:16:05.099705",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.079599",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#from list to numpy array \n",
    "train_Y = np.array(train_Y)\n",
    "test_Y = np.array(test_Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "28681685",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:05.129209Z",
     "iopub.status.busy": "2024-02-29T11:16:05.128245Z",
     "iopub.status.idle": "2024-02-29T11:16:05.137707Z",
     "shell.execute_reply": "2024-02-29T11:16:05.136299Z"
    },
    "papermill": {
     "duration": 0.027082,
     "end_time": "2024-02-29T11:16:05.140862",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.113780",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1760, 32, 32, 1) (1760, 26)\n",
      "(1100, 32, 32, 1) (1100, 26)\n"
     ]
    }
   ],
   "source": [
    "print(train_X.shape,train_Y.shape)\n",
    "print(test_X.shape,test_Y.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6713b8da",
   "metadata": {
    "papermill": {
     "duration": 0.010864,
     "end_time": "2024-02-29T11:16:05.165441",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.154577",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# 3. Creat model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "85442c09",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:05.194835Z",
     "iopub.status.busy": "2024-02-29T11:16:05.193755Z",
     "iopub.status.idle": "2024-02-29T11:16:05.202639Z",
     "shell.execute_reply": "2024-02-29T11:16:05.201827Z"
    },
    "papermill": {
     "duration": 0.024792,
     "end_time": "2024-02-29T11:16:05.204992",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.180200",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model = Sequential()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "aa4ac918",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:05.228753Z",
     "iopub.status.busy": "2024-02-29T11:16:05.228308Z",
     "iopub.status.idle": "2024-02-29T11:16:05.416138Z",
     "shell.execute_reply": "2024-02-29T11:16:05.414976Z"
    },
    "papermill": {
     "duration": 0.202951,
     "end_time": "2024-02-29T11:16:05.419070",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.216119",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "  super().__init__(\n"
     ]
    }
   ],
   "source": [
    "model.add(Conv2D(32, (3, 3), padding = \"same\", activation='relu', input_shape=(32,32,1)))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Conv2D(128, (3, 3), activation='relu'))\n",
    "model.add(MaxPooling2D(pool_size=(2,2)))\n",
    "model.add(Dropout(0.25))\n",
    " \n",
    "model.add(Flatten())\n",
    "model.add(Dense(128, activation='relu'))\n",
    "model.add(Dropout(0.2))\n",
    "# model.add(Dense(25, activation='softmax'))\n",
    "model.add(Dense(26, activation='softmax'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e2aad973",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:05.442277Z",
     "iopub.status.busy": "2024-02-29T11:16:05.441810Z",
     "iopub.status.idle": "2024-02-29T11:16:05.474862Z",
     "shell.execute_reply": "2024-02-29T11:16:05.473676Z"
    },
    "papermill": {
     "duration": 0.047534,
     "end_time": "2024-02-29T11:16:05.477368",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.429834",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │           <span style=\"color: #00af00; text-decoration-color: #00af00\">320</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)    │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">16</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">32</span>)     │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">14</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)     │        <span style=\"color: #00af00; text-decoration-color: #00af00\">18,496</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">7</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>)       │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Conv2D</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">5</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │        <span style=\"color: #00af00; text-decoration-color: #00af00\">73,856</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">MaxPooling2D</span>)  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">2</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)      │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Flatten</span>)               │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">512</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                   │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │        <span style=\"color: #00af00; text-decoration-color: #00af00\">65,664</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)             │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)            │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">26</span>)             │         <span style=\"color: #00af00; text-decoration-color: #00af00\">3,354</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ conv2d (\u001b[38;5;33mConv2D\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │           \u001b[38;5;34m320\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d (\u001b[38;5;33mMaxPooling2D\u001b[0m)    │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m16\u001b[0m, \u001b[38;5;34m32\u001b[0m)     │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_1 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m14\u001b[0m, \u001b[38;5;34m64\u001b[0m)     │        \u001b[38;5;34m18,496\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_1 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m7\u001b[0m, \u001b[38;5;34m64\u001b[0m)       │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ conv2d_2 (\u001b[38;5;33mConv2D\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m5\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │        \u001b[38;5;34m73,856\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ max_pooling2d_2 (\u001b[38;5;33mMaxPooling2D\u001b[0m)  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m2\u001b[0m, \u001b[38;5;34m128\u001b[0m)      │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ flatten (\u001b[38;5;33mFlatten\u001b[0m)               │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m512\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense (\u001b[38;5;33mDense\u001b[0m)                   │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │        \u001b[38;5;34m65,664\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dropout_1 (\u001b[38;5;33mDropout\u001b[0m)             │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m128\u001b[0m)            │             \u001b[38;5;34m0\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m26\u001b[0m)             │         \u001b[38;5;34m3,354\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">161,690</span> (631.60 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m161,690\u001b[0m (631.60 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">161,690</span> (631.60 KB)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m161,690\u001b[0m (631.60 KB)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b664a955",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:05.503348Z",
     "iopub.status.busy": "2024-02-29T11:16:05.502849Z",
     "iopub.status.idle": "2024-02-29T11:16:05.519901Z",
     "shell.execute_reply": "2024-02-29T11:16:05.518561Z"
    },
    "papermill": {
     "duration": 0.033604,
     "end_time": "2024-02-29T11:16:05.523055",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.489451",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model.compile(loss='categorical_crossentropy', optimizer=\"adam\",metrics=['accuracy'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "229a4418",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:05.548215Z",
     "iopub.status.busy": "2024-02-29T11:16:05.547739Z",
     "iopub.status.idle": "2024-02-29T11:16:51.477465Z",
     "shell.execute_reply": "2024-02-29T11:16:51.476384Z"
    },
    "papermill": {
     "duration": 45.945236,
     "end_time": "2024-02-29T11:16:51.480076",
     "exception": false,
     "start_time": "2024-02-29T11:16:05.534840",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 38ms/step - accuracy: 0.0555 - loss: 3.2449 - val_accuracy: 0.1336 - val_loss: 3.0805\n",
      "Epoch 2/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 33ms/step - accuracy: 0.1776 - loss: 2.7836 - val_accuracy: 0.2964 - val_loss: 2.5282\n",
      "Epoch 3/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - accuracy: 0.4076 - loss: 1.9712 - val_accuracy: 0.3682 - val_loss: 2.3285\n",
      "Epoch 4/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 39ms/step - accuracy: 0.5131 - loss: 1.5960 - val_accuracy: 0.4145 - val_loss: 2.1517\n",
      "Epoch 5/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 33ms/step - accuracy: 0.6408 - loss: 1.1666 - val_accuracy: 0.4345 - val_loss: 2.0659\n",
      "Epoch 6/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 33ms/step - accuracy: 0.6951 - loss: 0.9724 - val_accuracy: 0.4691 - val_loss: 1.9196\n",
      "Epoch 7/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - accuracy: 0.7196 - loss: 0.8306 - val_accuracy: 0.4909 - val_loss: 1.9412\n",
      "Epoch 8/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 34ms/step - accuracy: 0.7681 - loss: 0.6990 - val_accuracy: 0.5300 - val_loss: 1.8527\n",
      "Epoch 9/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 33ms/step - accuracy: 0.8257 - loss: 0.5741 - val_accuracy: 0.5182 - val_loss: 1.9456\n",
      "Epoch 10/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 38ms/step - accuracy: 0.8460 - loss: 0.5118 - val_accuracy: 0.5500 - val_loss: 1.8450\n",
      "Epoch 11/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 34ms/step - accuracy: 0.8403 - loss: 0.4746 - val_accuracy: 0.5618 - val_loss: 1.8587\n",
      "Epoch 12/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 40ms/step - accuracy: 0.8703 - loss: 0.3736 - val_accuracy: 0.5336 - val_loss: 1.8947\n",
      "Epoch 13/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 35ms/step - accuracy: 0.8872 - loss: 0.3538 - val_accuracy: 0.5609 - val_loss: 1.8350\n",
      "Epoch 14/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 33ms/step - accuracy: 0.8895 - loss: 0.3187 - val_accuracy: 0.5436 - val_loss: 2.0418\n",
      "Epoch 15/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 33ms/step - accuracy: 0.9044 - loss: 0.2993 - val_accuracy: 0.5318 - val_loss: 2.2265\n",
      "Epoch 16/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 33ms/step - accuracy: 0.9231 - loss: 0.2456 - val_accuracy: 0.5609 - val_loss: 1.9875\n",
      "Epoch 17/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 33ms/step - accuracy: 0.9231 - loss: 0.2099 - val_accuracy: 0.5809 - val_loss: 1.9257\n",
      "Epoch 18/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 39ms/step - accuracy: 0.9342 - loss: 0.1872 - val_accuracy: 0.5609 - val_loss: 2.0102\n",
      "Epoch 19/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 33ms/step - accuracy: 0.9356 - loss: 0.1877 - val_accuracy: 0.5673 - val_loss: 2.0529\n",
      "Epoch 20/20\n",
      "\u001b[1m55/55\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 32ms/step - accuracy: 0.9346 - loss: 0.1794 - val_accuracy: 0.5464 - val_loss: 2.3915\n"
     ]
    }
   ],
   "source": [
    "history = model.fit(train_X,train_Y, epochs=20, batch_size=32, validation_data = (test_X, test_Y),  verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "663099a2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:51.619319Z",
     "iopub.status.busy": "2024-02-29T11:16:51.618535Z",
     "iopub.status.idle": "2024-02-29T11:16:51.937876Z",
     "shell.execute_reply": "2024-02-29T11:16:51.936675Z"
    },
    "papermill": {
     "duration": 0.391399,
     "end_time": "2024-02-29T11:16:51.940497",
     "exception": false,
     "start_time": "2024-02-29T11:16:51.549098",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(history.history['accuracy'], bins=20, edgecolor='black')\n",
    "plt.title('Training Accuracy Distribution')\n",
    "plt.xlabel('Accuracy')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "4411c4fa",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:52.081289Z",
     "iopub.status.busy": "2024-02-29T11:16:52.080837Z",
     "iopub.status.idle": "2024-02-29T11:16:52.415947Z",
     "shell.execute_reply": "2024-02-29T11:16:52.414528Z"
    },
    "papermill": {
     "duration": 0.409271,
     "end_time": "2024-02-29T11:16:52.418580",
     "exception": false,
     "start_time": "2024-02-29T11:16:52.009309",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(history.history['loss'], bins=20, edgecolor='black')\n",
    "plt.title('Training Loss Distribution')\n",
    "plt.xlabel('Loss')\n",
    "plt.ylabel('Frequency')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "9b489878",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:52.560448Z",
     "iopub.status.busy": "2024-02-29T11:16:52.559705Z",
     "iopub.status.idle": "2024-02-29T11:16:52.728433Z",
     "shell.execute_reply": "2024-02-29T11:16:52.726829Z"
    },
    "papermill": {
     "duration": 0.242606,
     "end_time": "2024-02-29T11:16:52.730994",
     "exception": false,
     "start_time": "2024-02-29T11:16:52.488388",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 96ms/step\n",
      "Predicted Label: H\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "# Load the image\n",
    "image_path = '/kaggle/input/a-z-handwritten-alphabets-jpg-files-in-26-folders/alphabet-dataset/Validation/H/result_image_20240229_145626_459886_1.jpg'  # Change this to the path of your image\n",
    "image = cv2.imread(image_path)\n",
    "\n",
    "# Preprocess the image\n",
    "resized_image = cv2.resize(image, (32, 32))\n",
    "image_gray = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)\n",
    "(thresh, image_binary) = cv2.threshold(image_gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)\n",
    "image_binary = cv2.threshold(image_gray, thresh, 255, cv2.THRESH_BINARY)[1]\n",
    "normalized_image = image_binary / 255.0\n",
    "reshaped_image = np.reshape(normalized_image, (1, 32, 32, 1))  # Reshape for model input\n",
    "\n",
    "# Make prediction using the trained model\n",
    "prediction = model.predict(reshaped_image)\n",
    "\n",
    "# Convert prediction to label\n",
    "predicted_class_index = np.argmax(prediction)\n",
    "predicted_label = LB.classes_[predicted_class_index]\n",
    "\n",
    "print(\"Predicted Label:\", predicted_label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "9ce20dee",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-02-29T11:16:52.937757Z",
     "iopub.status.busy": "2024-02-29T11:16:52.937311Z",
     "iopub.status.idle": "2024-02-29T11:16:56.215018Z",
     "shell.execute_reply": "2024-02-29T11:16:56.213690Z"
    },
    "papermill": {
     "duration": 3.418116,
     "end_time": "2024-02-29T11:16:56.217799",
     "exception": false,
     "start_time": "2024-02-29T11:16:52.799683",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Predicted Label: N\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: N\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 20ms/step\n",
      "Predicted Label: H\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: A\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: Y\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: Y\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: O\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: O\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: N\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: O\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: N\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: M\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: M\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: O\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: M\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: A\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: A\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 24ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 25ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: N\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: O\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: Y\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: N\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 23ms/step\n",
      "Predicted Label: M\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: A\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: N\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 21ms/step\n",
      "Predicted Label: D\n",
      "\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 22ms/step\n",
      "Predicted Label: D\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "import os\n",
    "\n",
    "# Function to get image paths in a folder\n",
    "def get_image_paths(folder_path):\n",
    "    image_paths = []\n",
    "    for root, dirs, files in os.walk(folder_path):\n",
    "        for file in files:\n",
    "            if file.endswith('.jpg') or file.endswith('.jpeg') or file.endswith('.png'):\n",
    "                image_paths.append(os.path.join(root, file))\n",
    "    return image_paths\n",
    "\n",
    "# Function to preprocess and predict on an image\n",
    "def preprocess_and_predict(image_path, model, LB):\n",
    "    image = cv2.imread(image_path)\n",
    "    \n",
    "    # Preprocess the image\n",
    "    resized_image = cv2.resize(image, (32, 32))\n",
    "    image_gray = cv2.cvtColor(resized_image, cv2.COLOR_BGR2GRAY)\n",
    "    (thresh, image_binary) = cv2.threshold(image_gray, 128, 255, cv2.THRESH_BINARY | cv2.THRESH_OTSU)\n",
    "    image_binary = cv2.threshold(image_gray, thresh, 255, cv2.THRESH_BINARY)[1]\n",
    "    normalized_image = image_binary / 255.0\n",
    "    reshaped_image = np.reshape(normalized_image, (1, 32, 32, 1))  # Reshape for model input\n",
    "\n",
    "    # Make prediction using the trained model\n",
    "    prediction = model.predict(reshaped_image)\n",
    "\n",
    "    # Convert prediction to label\n",
    "    predicted_class_index = np.argmax(prediction)\n",
    "    predicted_label = LB.classes_[predicted_class_index]\n",
    "\n",
    "    #print(\"Image Path:\", image_path)\n",
    "    print(\"Predicted Label:\", predicted_label)\n",
    "    print()\n",
    "\n",
    "# Folder path containing images\n",
    "folder_path = '/kaggle/input/a-z-handwritten-alphabets-jpg-files-in-26-folders/alphabet-dataset/Validation/D'\n",
    "\n",
    "# Get image paths in the folder\n",
    "image_paths = get_image_paths(folder_path)\n",
    "\n",
    "# Loop through all image paths and preprocess/predict\n",
    "for image_path in image_paths:\n",
    "    preprocess_and_predict(image_path, model, LB)\n"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 53376,
     "sourceId": 101598,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 818027,
     "sourceId": 1400106,
     "sourceType": "datasetVersion"
    },
    {
     "datasetId": 4514409,
     "sourceId": 7727240,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30664,
   "isGpuEnabled": false,
   "isInternetEnabled": false,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 90.769389,
   "end_time": "2024-02-29T11:16:58.731375",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-02-29T11:15:27.961986",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}

